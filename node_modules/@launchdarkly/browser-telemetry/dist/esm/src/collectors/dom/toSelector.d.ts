/**
 * The elements of a node we need to generate a string representation.
 *
 * All element fields are optional, so a type guard is not required to use this typing.
 */
interface BasicElement {
    tagName?: string;
    id?: string;
    className?: string;
}
/**
 * Given an element produce a class name in CSS selector format.
 *
 * Exported for testing.
 *
 * @param element The element to get a class name for.
 * @returns The class name, or undefined if there is no class name.
 */
export declare function getClassName(element: BasicElement): string | undefined;
/**
 * Produce a string representation for a single DOM element. Does not produce the full selector.
 *
 * Exported for testing.
 *
 * @param element The element to produce a text representation for.
 * @returns A text representation of the element, or an empty string if one cannot be produced.
 */
export declare function elementToString(element: BasicElement): string;
/**
 * Given an HTML element produce a CSS selector.
 *
 * Defaults to a maximum depth of 10 components.
 *
 * Example:
 * ```
 * <html>
 *  <body>
 *    <div>
 *      <ul>
 *        <li class="some-class">
 *          <p id="some-id">toaster</p>
 *        </li>
 *      </ul>
 *    </div>
 *  </body>
 * </html>
 * ```
 * The <p> element in the above HTML would produce:
 * `body > div > ul > li.some-class > p#some-id`
 *
 * @param element The element to generate a selector from.
 * @param options Options which control selector generation.
 * @returns The generated selector.
 */
export default function toSelector(element: unknown, options?: {
    maxDepth: number;
}): string;
export {};
//# sourceMappingURL=toSelector.d.ts.map