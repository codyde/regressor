import { Collector } from './api/Collector';
import { Options, UrlFilter } from './api/Options';
export declare function defaultOptions(): ParsedOptions;
export default function parse(options: Options): ParsedOptions;
export interface ParsedHttpOptions {
    /**
     * True to instrument fetch and enable fetch breadcrumbs.
     */
    instrumentFetch: boolean;
    /**
     * True to instrument XMLHttpRequests and enable XMLHttpRequests breadcrumbs.
     */
    instrumentXhr: boolean;
    /**
     * Optional custom URL filter.
     */
    customUrlFilter?: UrlFilter;
}
export interface ParsedStackOptions {
    source: {
        /**
         * The number of lines captured before the originating line.
         */
        beforeLines: number;
        /**
         * The number of lines captured after the originating line.
         */
        afterLines: number;
        /**
         * The maximum length of source line to include. Lines longer than this will be
         * trimmed.
         */
        maxLineLength: number;
    };
}
export interface ParsedOptions {
    /**
     * The maximum number of pending events. Events may be captured before the LaunchDarkly
     * SDK is initialized and these are stored until they can be sent. This only affects the
     * events captured during initialization.
     */
    maxPendingEvents: number;
    /**
     * Properties related to automatic breadcrumb collection.
     */
    breadcrumbs: {
        /**
         * Set the maximum number of breadcrumbs. Defaults to 50.
         */
        maxBreadcrumbs: number;
        /**
         * True to enable automatic evaluation breadcrumbs. Defaults to true.
         */
        evaluations: boolean;
        /**
         * True to enable flag change breadcrumbs. Defaults to true.
         */
        flagChange: boolean;
        /**
         * True to enable click breadcrumbs. Defaults to true.
         */
        click: boolean;
        /**
         * True to enable input breadcrumbs for keypresses. Defaults to true.
         */
        keyboardInput?: boolean;
        /**
         * Settings for http instrumentation and breadcrumbs.
         */
        http: ParsedHttpOptions;
    };
    /**
     * Settings which affect call stack capture.
     */
    stack: ParsedStackOptions;
    /**
     * Additional, or custom, collectors.
     */
    collectors: Collector[];
}
//# sourceMappingURL=options.d.ts.map