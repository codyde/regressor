import { ParsedStackOptions } from '../options';
import StackTrace from './StackTrace';
/**
 * For files hosted on the origin attempt to reduce to just a filename.
 * If the origin matches the source file, then the special identifier `(index)` will
 * be used.
 *
 * @param input The input URL.
 * @returns The output file name.
 */
export declare function processUrlToFileName(input: string, origin: string): string;
export interface TrimOptions {
    /**
     * The maximum length of the trimmed line.
     */
    maxLength: number;
    /**
     * If the line needs trimmed, then this is the number of character to retain before the
     * originating character of the frame.
     */
    beforeColumnCharacters: number;
}
/**
 * Trim a source string to a reasonable size.
 *
 * @param options Configuration which affects trimming.
 * @param line The source code line to trim.
 * @param column The column which the stack frame originates from.
 * @returns A trimmed source string.
 */
export declare function trimSourceLine(options: TrimOptions, line: string, column: number): string;
/**
 * Exported for testing.
 */
export declare function getLines(start: number, end: number, context: string[], trimmer: (val: string) => string): string[];
/**
 * Exported for testing.
 */
export declare function getSrcLines(inFrame: {
    context?: string[];
    column?: number;
}, options: ParsedStackOptions): {
    srcBefore?: string[];
    srcLine?: string;
    srcAfter?: string[];
};
/**
 * Parse the browser stack trace into a StackTrace which contains frames with specific fields parsed
 * from the free-form stack. Browser stack traces are not standardized, so implementations handling
 * the output should be resilient to missing fields.
 *
 * @param error The error to generate a StackTrace for.
 * @returns The stack trace for the given error.
 */
export default function parse(error: Error, options: ParsedStackOptions): StackTrace;
//# sourceMappingURL=StackParser.d.ts.map